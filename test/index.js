// Generated by CoffeeScript 1.3.3
(function() {
  var Client, Repository, TreeStore, app, assert, backend, client1, client2, contentAddressable, createApp, createMemoryStore, dataA, dataB, difference, req, serverBlobStore, serverHeadStore, serverRepo, serverTreeStore, testPort, url, _ref;

  assert = require('assert');

  req = require('superagent');

  _ref = require('synclib'), Repository = _ref.Repository, TreeStore = _ref.TreeStore, backend = _ref.backend;

  contentAddressable = require('content-addressable');

  createMemoryStore = require('pluggable-store').server().memory;

  createApp = require('../lib/index');

  difference = require('underscore').difference;

  testPort = 3000;

  url = function(path) {
    return 'http://localhost:' + testPort + path;
  };

  serverBlobStore = contentAddressable.fileSystem(process.env.HOME + '/syncstore');

  serverTreeStore = contentAddressable.memory();

  serverHeadStore = createMemoryStore();

  serverRepo = new Repository(serverTreeStore);

  app = createApp({
    blobStore: serverBlobStore,
    repository: serverRepo,
    headStore: serverHeadStore
  });

  Client = (function() {

    function Client() {
      this.blobStore = contentAddressable.memory();
      this.treeStore = contentAddressable.memory();
      this.repo = new Repository(this.treeStore);
      this.branch = this.repo.branch();
      this.remotes = {};
    }

    return Client;

  })();

  client1 = new Client();

  client2 = new Client();

  dataA = [
    {
      'a': "hashA 0.0",
      'b/c': "hashA 0.1",
      'b/d': "hashA 0.2"
    }, {
      'a': "hashA 1.0",
      'b/c': "hashA 1.1",
      'b/e': "hashA 1.2",
      'b/f/g': "hashA 1.3"
    }, {
      'b/e': "hashA 2.0"
    }
  ];

  dataB = [
    {
      'b/h': "hashB 0.0"
    }, {
      'c/a': "hashB 1.0"
    }, {
      'a': "hashB 2.0",
      'u': "hashB 2.1"
    }, {
      'b/c': "hashB 3.0",
      'b/e': "hashB 3.1",
      'b/f/a': "hashB 3.2"
    }
  ];

  before(function(done) {
    return app.listen(testPort, 'localhost', done);
  });

  after(function(done) {
    return serverBlobStore.store.adapter["delete"](done);
  });

  describe('http-interface', function() {
    describe('blob storage', function() {
      return it('should POST some data and return the hash to GET it', function(done) {
        var data;
        data = {
          data: "some data"
        };
        return req.post(url('/blob')).send(data).end(function(res) {
          var hash;
          hash = res.body.hash;
          return req.get(url('/blob/' + hash)).end(function(res) {
            assert.equal(res.body.data, data.data);
            return done();
          });
        });
      });
    });
    describe('client1', function() {
      it('should do some local commits and POST the diff to the server', function(done) {
        var diff, diffHashs, each, _i, _len;
        for (_i = 0, _len = dataA.length; _i < _len; _i++) {
          each = dataA[_i];
          client1.branch.commit(each);
        }
        diffHashs = client1.branch.patchHashs();
        diff = client1.repo.patchData(diffHashs);
        return req.post(url('/trees')).send(diff.trees).end(function(res) {
          var i, _j, _len1, _ref1;
          _ref1 = res.body.treeHashs;
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            each = _ref1[i];
            assert.equal(each, diffHashs.trees[i]);
          }
          client1.remotes.client1 = client1.branch.head;
          return done();
        });
      });
      return it('should set its head on the server', function(done) {
        return req.put(url('/head/client1')).send({
          hash: client1.branch.head
        }).end(function(res) {
          return req.get(url('/head/client1')).end(function(res) {
            assert.equal(res.body.hash, client1.branch.head);
            return done();
          });
        });
      });
    });
    describe('client2', function() {
      it('should do some commits and push the diff', function(done) {
        var diff, each, _i, _len;
        for (_i = 0, _len = dataB.length; _i < _len; _i++) {
          each = dataB[_i];
          client2.branch.commit(each);
        }
        diff = client2.repo.patchData(client2.branch.patchHashs());
        return req.post(url('/trees')).send(diff.trees).end(function() {
          client2.remotes.client2 = client2.branch.head;
          return done();
        });
      });
      it('should ask for client1\'s head', function(done) {
        return req.get(url('/head/client1')).end(function(res) {
          client2.remotes.client1 = res.body.hash;
          return done();
        });
      });
      it('should ask for the patch to client1 head', function(done) {
        return req.get(url('/trees?from=' + client2.remotes.client2 + '&to=' + client2.remotes.client1)).end(function(res) {
          client2.treeStore.writeAll(res.body.trees);
          return done();
        });
      });
      it('should do a local merge of client1s diff', function() {
        var head, headTree, oldHead;
        oldHead = client2.branch.head;
        head = client2.branch.merge({
          ref: client2.remotes.client1
        });
        headTree = client2.treeStore.read(head);
        return assert.equal(difference(headTree.ancestors, [client2.remotes.client1, oldHead]).length, 0);
      });
      it('should push its new diff to the server', function(done) {
        var knownPatch, patch, patchData, remote, remoteHead, _ref1;
        patch = client2.branch.patchHashs({
          from: client2.remotes.client2
        });
        _ref1 = client2.remotes;
        for (remote in _ref1) {
          remoteHead = _ref1[remote];
          knownPatch = client2.repo.patchHashs({
            from: client2.remotes.client2,
            to: remoteHead
          });
          patch.trees = difference(patch.trees, knownPatch.trees);
          patch.data = difference(patch.data, knownPatch.data);
        }
        patchData = client2.repo.patchData(patch);
        return req.post(url('/trees')).send(patchData.trees).end(function() {
          client2.remotes.client2 = client2.branch.head;
          return done();
        });
      });
      return it('should update its head on the server', function(done) {
        return req.put(url('/head/client2')).send({
          hash: client2.branch.head
        }).end(function(res) {
          return done();
        });
      });
    });
    return describe('client1 - step 2', function() {
      it('should ask for client2 head and fetch the patch', function(done) {
        return req.get(url('/head/client2')).end(function(res) {
          client1.remotes.client2 = res.body.hash;
          return req.get(url('/trees?from=' + client1.remotes.client1 + '&to=' + client1.remotes.client2)).end(function(res) {
            client1.treeStore.writeAll(res.body.trees);
            return done();
          });
        });
      });
      return it('does a local fast-forward merge', function() {
        var head;
        head = client1.branch.merge({
          ref: client1.remotes.client2
        });
        return assert.equal(head, client1.remotes.client2);
      });
    });
  });

}).call(this);
